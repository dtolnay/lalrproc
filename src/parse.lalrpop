use ast::{Type, Path, Reference, Expr, BinOp, Ident, Lifetime};
use error::NoUserError;
use token::Token;
use span::Span;
use proc_macro::Literal;

grammar;

extern {
    type Error = NoUserError;
    type Location = Span;

    enum Token {
        // The delimiters needed by our grammar
        "(" => Token::Open(::proc_macro::Delimiter::Parenthesis),
        ")" => Token::Close(::proc_macro::Delimiter::Parenthesis),

        // The punctuation needed by our grammar
        "+" => Token::Op('+'),
        "-" => Token::Op('-'),
        "*" => Token::Op('*'),
        "/" => Token::Op('/'),
        "&" => Token::Op('&'),
        ":" => Token::Op(':'),
        Op => Token::Op(<char>),
        Joint => Token::Joint,

        // The keywords needed by our grammar
        "mut" => Token::Keyword(::token::Keyword::Mut),

        // Other terminals in the grammar
        BasicIdent => Token::Ident(<::proc_macro::Term>),
        BasicLifetime => Token::Lifetime(<::proc_macro::Term>),
        Literal => Token::Literal(<Literal>),
    }
}

pub Type: Box<Type> = {
    Path => Box::new(Type::Path(<>)),
    Reference => Box::new(Type::Reference(<>)),
};

Path: Path = {
    <v:(<Ident> ":" Joint ":")*> <e:Ident> => {
        let mut v = v;
        v.push(e);
        Path { segments: v }
    }
};

Reference: Reference = {
    "&" <lifetime:Lifetime?> <mutable:Mutable> <elem:Type> => Reference {<>}
};

Mutable: bool = {
    "mut" => true,
    => false,
};

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Binary(<>)),
    Factor,
};

ExprOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Component => Box::new(Expr::Binary(<>)),
    Component,
};

FactorOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
};

Component: Box<Expr> = {
    Literal => Box::new(Expr::Lit(<>)),
    Path => Box::new(Expr::Path(<>)),
    "(" <Expr> ")",
};

Ident: Ident = {
    <span:@L> <term:BasicIdent> => Ident {<>}
};

Lifetime: Lifetime = {
    <span:@L> <term:BasicLifetime> => Lifetime {<>}
};
